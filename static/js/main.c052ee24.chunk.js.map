{"version":3,"sources":["component/weather/weathercard.js","component/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","React","useState","weatherstate","setweatherstate","temp","humidity","pressure","weathermood","name","speed","country","sunset","date","Date","timesunset","getHours","getMinutes","useEffect","className","toLocaleString","Temp","searchValue","setSearchValue","settempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c052ee24.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\n\r\nconst WeatherCard = ({tempInfo}) => {\r\n    const [weatherstate, setweatherstate] = React.useState(\"\");\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset\r\n    }=tempInfo;\r\n\r\n    let sec=sunset;\r\n    let date= new Date(sec*1000);\r\n    let timesunset = `${date.getHours()}:${date.getMinutes()}`\r\n\r\n    useEffect(() => {\r\n        if(weathermood){\r\n            switch(weathermood){\r\n                case \"Clouds\":\r\n                    setweatherstate(\"wi-day-cloudy\"); \r\n                    break;\r\n                case \"Haze\":\r\n                    setweatherstate(\"wi-fog\"); \r\n                    break;\r\n                case \"Clear\":\r\n                    setweatherstate(\"wi-day-sunny\"); \r\n                    break;\r\n                case \"Rain\":\r\n                    setweatherstate(\"wi-day-rain\"); \r\n                    break; \r\n                case \"Mist\":\r\n                    setweatherstate(\"wi-dust\"); \r\n                    break;  \r\n                default:\r\n                    setweatherstate(\"wi-day-sunny\"); \r\n                    break;\r\n                /*case \"Clouds\":\r\n                    setweatherstate(\"wi-day-cloud\"); \r\n                    break;   \r\n                case \"Clouds\":\r\n                    setweatherstate(\"wi-day-cloud\"); \r\n                    break;\r\n                case \"Clouds\":\r\n                    setweatherstate(\"wi-day-cloud\"); \r\n                    break; \r\n                    */ \r\n            }\r\n        }\r\n    }, [weathermood])\r\n    return (\r\n    <>\r\n        <div className=\"widget\">\r\n            \r\n        <div className=\"weatherIcon\">\r\n            <i className={`wi ${weatherstate}`}></i>\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n\r\n           <div className=\"temperature\"> \r\n                <span>{temp}&deg;</span>\r\n           </div>\r\n           <div className=\"description\">\r\n\r\n                <div className=\"weatherCondition\">\r\n                    {weathermood}\r\n                </div>\r\n\r\n                <div className=\"place\">\r\n                    {name},{country}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        <div className=\"date\">\r\n            {new Date().toLocaleString()}\r\n        </div>\r\n\r\n        <div className=\"extra-temp\">\r\n\r\n            <div className=\"temp-info-minmax\">\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className=\"wi wi-sunset\"></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {timesunset} PM\r\n                        <br></br>\r\n                        sunset\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className=\"wi wi-humidity\"></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                    {humidity} %\r\n                        <br></br>\r\n                        Humidity\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"weather-extra-info\">\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className=\"wi wi-rain\"></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {pressure} hpa\r\n                        <br></br>\r\n                        Pressure\r\n                    </p>\r\n                </div>\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className=\"wi wi-strong-wind\"></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {speed} m/s\r\n                        <br></br>\r\n                        Air Speed\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div> \r\n </>\r\n)\r\n}\r\n\r\nexport default WeatherCard;\r\n","//https://api.openweathermap.org/data/2.5/weather?q=jodhpur&appid=f4dd1b226adda9cb3dfebd1c71dca197\r\nimport React, {useState, useEffect} from 'react'\r\nimport './style.css';\r\nimport WeatherCard from './weathercard'\r\n\r\nconst Temp = () => {\r\nconst [searchValue, setSearchValue] = useState(\"jodhpur\");\r\nconst [tempInfo, settempInfo] = useState({});\r\nconst getWeatherInfo = async () => {\r\n    try{\r\n        let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}\r\n        &units=metric&appid=f4dd1b226adda9cb3dfebd1c71dca197`;\r\n\r\n        const res= await fetch(url);\r\n        const data = await res.json();\r\n        const { temp,humidity,pressure }=data.main;\r\n        const{ main: weathermood }= data.weather[0];\r\n        const{ name }= data;\r\n        const{ speed }= data.wind;\r\n        const{ country,sunset}= data.sys;\r\n\r\n        const myNewWeatherInfo = {\r\n            temp,\r\n            humidity,\r\n            pressure,\r\n            weathermood,\r\n            name,\r\n            speed,\r\n            country,\r\n            sunset\r\n        };\r\n        settempInfo(myNewWeatherInfo); \r\n        console.log(temp);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\nuseEffect(()=>{\r\n    getWeatherInfo();\r\n},[]);\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n\r\n                <div className=\"search\">\r\n\r\n                    <input \r\n                    type=\"search\" \r\n                    placeholder=\"Search here...\" \r\n                    autoFocus \r\n                    id=\"search\" \r\n                    className=\"searchTerm\"\r\n                    value={searchValue}\r\n                    onChange={ (e)=> setSearchValue(e.target.value)}>\r\n                    </input>\r\n\r\n                    <button \r\n                    className=\"searchButton\"\r\n                    type=\"button\"\r\n                    onClick={\r\n                        getWeatherInfo\r\n                    }\r\n                    >\r\n                    Search\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n            <WeatherCard tempInfo={tempInfo}/>\r\n           \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp ","import React from 'react'\nimport Temp from './component/weather/temp'\nconst App = () => {\n  return (\n    <>\n      <Temp/>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}